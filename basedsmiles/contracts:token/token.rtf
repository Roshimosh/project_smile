{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ AccountId, PrivateKey, Client, TokenCreateTransaction, TokenType, Hbar, TokenMintTransaction, TokenSupplyType \} from "@hashgraph/sdk";\
import smileImageMetadata from "./smileData.js";  // Mock smile data (image URLs & scores)\
import accountCreateFcn from "./utils/accountCreate.js";\
import dotenv from "dotenv";\
dotenv.config();\
console.clear();\
\
// Configure accounts and client, and generate needed keys\
const operatorId = AccountId.fromString(process.env.ACCOUNT_ID);\
const operatorKey = PrivateKey.fromStringECDSA(process.env.PRIVATE_KEY_HEX);\
const network = process.env.NETWORK;\
\
const client = Client.forNetwork(network).setOperator(operatorId, operatorKey);\
client.setDefaultMaxTransactionFee(new Hbar(100));\
client.setDefaultMaxQueryPayment(new Hbar(50));\
\
const supplyKey = PrivateKey.generateECDSA();\
\
async function main() \{\
    console.log(`\\n\uc0\u55357 \u57312  Smile and Get Paid: Create an NFT collection based on smile ratings \u55357 \u57312 `);\
\
    // Create a new account to serve as the treasury\
    console.log(`\\n- Creating a new Hedera account to serve as the treasury for the token...`);\
    const initBalance = new Hbar(1); // Initial Hbar balance for the treasury\
    const treasuryKey = PrivateKey.generateECDSA();\
    const [treasuryCreateTxId, treasuryId] = await accountCreateFcn(treasuryKey, initBalance, client);\
    console.log(`- Created Treasury with account ID: $\{treasuryId\} \uc0\u9989 \\n`);\
\
    // Create a new NFT collection for Smile Ratings\
    console.log(`\\n- Creating a new NFT collection for smiles...`);\
    let nftCreateTx = new TokenCreateTransaction()\
        .setTokenName("SMILE AND GET PAID")  // Name for the smile collection\
        .setTokenSymbol("SMILEPAY")  // Symbol representing the smile-based token\
        .setTreasuryAccountId(treasuryId)\
        .setTokenType(TokenType.NonFungibleUnique)\
        .setSupplyType(TokenSupplyType.Finite)\
        .setDecimals(0)\
        .setInitialSupply(0)  // 0 as NFTs cannot have an initial supply\
        .setMaxSupply(10000)  // Max supply can be set to any number of smile-based NFTs\
        .setSupplyKey(supplyKey.publicKey)\
        .freezeWith(client);\
\
    let nftCreateSign = await nftCreateTx.sign(treasuryKey);\
    let nftCreateSubmit = await nftCreateSign.execute(client);\
    let nftCreateRx = await nftCreateSubmit.getReceipt(client);\
    let tokenId = nftCreateRx.tokenId;\
    console.log(`- Created NFT collection with token ID: $\{tokenId\} \uc0\u9989 \\n`);\
\
    // Mint Smile NFTs (e.g., smile images and scores as metadata)\
    console.log(`\\n- Minting smile NFTs based on smile ratings...`);\
    const mintTx = new TokenMintTransaction()\
        .setTokenId(tokenId)\
        .setMetadata(smileImageMetadata)  // Pass the smile data as metadata\
        .freezeWith(client);\
\
    const mintSign = await mintTx.sign(supplyKey);\
    const mintSubmit = await mintSign.execute(client);\
    const mintRx = await mintSubmit.getReceipt(client);\
    console.log(`- Minted NFTs: $\{mintRx.status\} \uc0\u9989 \\n`);\
\
    // Display minted smile NFTs with their serial numbers\
    for (let i = 0; i < smileImageMetadata.length; i++) \{\
        console.log(`- See Smile NFT serial $\{i + 1\}:`);\
        console.log(`   Smile Score: $\{smileImageMetadata[i].score\} | Smile Image: $\{smileImageMetadata[i].imageUrl\}`);\
        console.log(`   Token details: https://hashscan.io/$\{network\}/token/$\{tokenId\}/$\{i + 1\} \uc0\u55357 \u56599 `);\
    \}\
\
    // Reward high-scoring smiles (4 or 5 rating) with Hedera coins (if required)\
    console.log(`\\n- Rewarding users with Hedera coins for high smile scores...`);\
    smileImageMetadata.forEach((smile, index) => \{\
        if (smile.score >= 4) \{\
            console.log(`User with Smile NFT serial $\{index + 1\} (Score: $\{smile.score\}) will be rewarded!`);\
            // Additional logic for rewarding Hedera coins can be added here\
        \}\
    \});\
\
    console.log(`\\n- THE END ============================================================\\n`);\
    console.log(`\uc0\u55357 \u56391  Go to:`);\
    console.log(`\uc0\u55357 \u56599  www.hedera.com/discord\\n`);\
\
    client.close();\
\}\
\
main();\
}